[product-development-flow]: /handbook/product-development-flow/
[planning-breakdown]: /handbook/product-development-flow/#build-phase-1-plan
[iteration]: /handbook/values/#iteration
[key-metrics]: /handbook/engineering/management/engineering-metrics/#universal-team-metrics-dashboard-in-sisense

# How we operate

## Iteration 

[Iteration][iteration] is key to success for GitLab and every developer inside the company. In our team we try to work as iteratively as possible. Following the [companys key metrics][key-metrics] we aim for small and focused MRs.

Some examples of successful Iteration Work
- [Remove staging from commit workflows in the WebIDE](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/26151)
- [Design View Zooming capabilities](https://gitlab.com/gitlab-org/gitlab/-/issues/13217)
- [Split up work to replace ACE with Monaco](https://gitlab.com/groups/gitlab-org/-/epics/498)
- Design Upload Additions [Drag-n-Drop](https://gitlab.com/gitlab-org/gitlab/-/issues/39452)[Copy-Paste](https://gitlab.com/gitlab-org/gitlab/-/issues/202634)

The approach can be summarized like so:

> GitLab.com is the source of truth. Everything that is not shipped and live is not done.

👏👏👏 


## Collaboration

> "Talent wins games, but teamwork and intelligence win championships." – Michael Jordan

### PM - EM

Our team follows the general [Product Development Flow][product-development-flow] but this guide is intended to elaborate on a few elements to represent the team internal flavor, emphasis certain points, and smooth the collaboration.

### Workflow labels

Let's look at a few of the workflow labels we should take as important cornerstones of our development workflow.


`workflow::planning breakdown`

This is the point where EM’s join the efforts, unless requested earlier. For work that requires UI or UX changes it’s expected that they have gone through the design phase already. More details  can be found on this [handbook page][planning-breakdown].

Should a feature require `backend` and `frontend` work that issue will receive it’s weight based on relevant child issues that are created as part of the breakdown. The labels `frontend-weight::x` and `backend-weight::x` will help keep track of these.

If needed we will create a Technical Discovery issue for features that have a higher level of complexity.  A Technical Discovery Issue should produce either an Epic, another Issue or feed back into the spawning Issue.

**Epic**

If the team determines that multiple issues must be created. An Epic should be created. All of the new issues created including the Technical Discovery issue, will be assigned to the Epic. The issues will be displayed on the Epic in order of priority. The issues will include dependencies so that the order the issues must be completed in is transparent. An Epic can be spread over multiple releases to support the GitLab Core Values around Iteration

**Issue**
If only one issue is created, the Technical Discovery proved that a simple solution can be implemented. The traditional Product Workflow should be followed.


`workflow::scheduling`

For an Issue to reach the scheduling phase it requires it weight to be set. It can be treated similar to the `workflow::ready for development` state except it's in a holding pattern using the `%Backlog%` milestone, until a proper milestone gets assigned.


`workflow::ready for development`

A feature that is ready for development should be able to be picked up at any point by an Engineer and should have a provisional milestone assigned. If such a feature requires BE and FE, the corresponding features should also be in this state.

### Directional, Deliverable, Stretch and Discovery

Product will provide the directional items for upcoming milestones and the EM will make sure that these get prioritized accordingly. To account for enough resource planning time it's recommended to have `direction` items ready ~10 days prior the next milestone. We need to account for engineers, who might be critical for scheduling the work, might be Out of Office (OOO) or live in the APAC zone.

Engineering will use the `~Deliverable` label on any issue the team commits to during the milestone. Only features that reached the `scheduling` or `ready for development` phase can receive the `~Deliverable` label.
Issues that might be in the planning breakdown phase, but on track for a upcoming Milestone, migh receive the `~Discovery` label to indicate that Engineering discovery needs to happen on it.

Should issues be added during the milestone (unexpected work), they will not receive the `~Deliverable` label.

> As Engineer, plan accordingly and communicate if something changes.

#### After the Kickoff

The EM will provide a overview of committed work in the corresponding milestone planning issue and raise potential blockers. The initial focus will lie on resolving these blockers as fast as possible

## Engineering

What's expected from an engineer working in this department to support successful collaboration?

### Communication
GitLab's asynchronous communication is great, but also requires some extra effort. As we collaborate not only with our department of frontend, but also backend, we should proactively communicate things like **OOO**. Share it in the appropriate group Slack channel to give others a heads-up. No one should be hit by surprise as sometimes work depends on the other person to be here.

### Start of the Milestone
Once the milestone has started, focus on a few things:

- Go through all your deliverables and make sure they are all clear
- Raise potential blockers as they can often reveal late in the process
- Be vocal if there are open questions or something seems off (everyone makes mistakes)

### Status Updates
Every week engineers should drop their status updates on the planning issues. [Here's an example](https://gitlab.com/gitlab-org/create-stage/-/issues/12625#note_330185760) 
For the 1:1 it's enough to reference that status update.
You'll always find the latest planning issue linked in the teams frontend channel.

**Why on the planning issue?**
This creates visibility to various stake holders, and allows for direct conversation. Another step for transparent communication.

