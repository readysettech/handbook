---
layout: handbook-page-toc
title: Secure Release Process
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Secure Release Process

Our release process covers the versioning and release of our [Security Products](#security-products) and [analyzers](https://gitlab.com/gitlab-org/security-products/analyzers/). The vulnerability database is [updated on a regular basis](https://docs.gitlab.com/ee/user/application_security/#maintenance-and-update-of-the-vulnerabilities-database).

For [individual analyzers](https://gitlab.com/gitlab-org/security-products/analyzers/), the reviewer who merges the Merge Request is responsible for creating the relevant tag, [per our versioning and release process](https://gitlab.com/gitlab-org/security-products/analyzers/common#versioning-and-release-process).
In the event that they are unwilling or unable, they should request another reviewer with merge access release on their behalf.

Our release process is aided by scripts stored in our [release scripts project](https://gitlab.com/gitlab-org/security-products/release). 

### Versioning

GitLab Security Products use an independent versioning system from GitLab's MAJOR.MINOR. All products use a variation of [Semantic Versioning](https://semver.org). [DAST](#dast) has a dedicated versioning process, [as documented in the DAST project](https://gitlab.com/gitlab-org/security-products/dast/blob/master/doc/release-process.md)

Each Security Product releases a new `MAJOR` tag with each update to our underlying tools.
For each security product, a tagged image also corresponds to the 
[git tag of the released version; i.e. `dast:1.15.0`](https://gitlab.com/gitlab-org/security-products/dast/tags).
In most circumstances it is preferred to rely on the `MAJOR` image instead,
which is automatically kept up to date with the latest advisories or patches to our tools.
Our [included CI templates](https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates/Security) pin to major version but if preferred, users can override their version directly.

```mermaid
graph LR

A1[git tag v1.1.1]--> B1(run CI pipeline)
B1 -->|build tag| D1[1.1.1]
B1 -->|tag major| E1[1]
B1 -->|build edge| E2[edge]

A2[git tag v1.2.0]--> B2(run CI pipeline)
B2 -->|build tag| D2[1.1.2]
B2 -->|retag major| E3[1]
B2 -->|retag edge| E4[edge]
```

Per our Continuous Deployment flow, for new components that do not have a counterpart in the GitLab
Rails application, the component can be released at any time. Until the components
are integrated with the existing application, iteration should not be blocked by [our
standard release cycle and process](https://about.gitlab.comproduct-process)

### Release Manager

A [Release Manager](./release_managers.md) is assigned to each release and is responsible for:

- following the release process to generate the new version of related projects (binaries, docker images, etc.)
- following the QA process to ensure we ship fully functional software

Release Managers ensure that the latest versions of all projects
are published and perform Q&A on the latest release of GitLab.

### Monthly release process

This should be done on the **18th of each month**. Though, this is a soft deadline and there is no harm in doing it within a few days after.

First, create an new issue for a release with a script from this repo: `./scripts/release_issue.rb MAJOR.MINOR`.
This issue will guide you through the whole release process. In general, you have to perform the following tasks:

* Check the list of supported technologies in GitLab documentation.
  * [Supported languages in SAST](https://docs.gitlab.com/ee/user/application_security/sast/index.html#supported-languages-and-frameworks)
  * [Supported languages in DS](https://docs.gitlab.com/ee/user/application_security/dependency_scanning/index.html#supported-languages-and-package-managers)
  * [Supported languages in LM](https://docs.gitlab.com/ee/user/application_security/license_compliance/index.html#supported-languages-and-package-managers)

* Check that CI **_job definitions are still accurate_** in vendored CI/CD templates and **_all of the ENV vars are propagated_** to the Docker containers upon `docker run` per tool.

  * [SAST vendored CI/CD template](https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml)
  * [Dependency Scanning vendored CI/CD template](https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Dependency-Scanning.gitlab-ci.yml)
  * [License Scanning vendored CI/CD template](https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/License-Scanning.gitlab-ci.yml)
  * [Container Scanning CI/CD template](https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml)

  If needed, go to the pipeline corresponding to the last git tag,
  and trigger the manual job that controls the build of this image.
